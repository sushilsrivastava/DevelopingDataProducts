dat <- readRDS("C:/Users/ssrivast/Desktop/college_major_analysis.rds")
dat
dat[1,2]
dat[1,3]
dat[1,4]
dat[1,4].list
dat[1,4]
View(dat)
tail(InsectSprays)
head(InsectSprays)
pmodel<-glm(count~spray,InsectSprays)
pmodel<-glm(count~spray,InsectSprays,family = poisson())
pmodel<-glm(count~spray,InsectSprays,family = poisson)
summary(pmodel)
pmodel2<-glm(count~spray-1,InsectSprays,family = poisson)
summary(pmodel2)
coef(pmodel2)
pmodel2$coefficients
pmodel2$residuals
nrow(InsectSprays)
pmodel2$fitted.values
InsectSprays$count
pmodel2$effects
pmodel2$R
pmodel2$rank
pmodel2$qr
pmodel2$qr
pmodel2$family
pmodel2$linear.predictors
pmodel2$deviance
pmodel2$aic
pmodel2$null.deviance
pmodel2$iter
pmodel2$xlevels
pmodel2$ylevels
pmodel2$method
pmodel2$data
pmodel2$weights
pmodel2$y
pmodel2$offset
pmodel2$xlevels
pmodel2$contrasts
pmodel2$terms
library(MASS)
shuttle
nrow
nrow(shuttle)
shuttle
?mutate
?mutate
library(dplyr)
?mutate
head(shuttle)
model<-glm(use~wind,shuttle,family = binomial)
summary()
summary(model)
model<-glm(use~factor(wind),shuttle,family = binomial)
summary(model)
model<-glm(use~factor(wind)-1,shuttle,family = binomial)
summary(model)
model$coefficients
model$coef
model$res
model$re
model$r
model$rese
model$residuals
model$residual
model$residua
model$residu
model$resid
model$resi
model$res
model$re
model$r
model$df
model$df.
model$df.n
model$df.null
model<-glm(use~factor(wind)-1,shuttle,family = binomial)
summary(model)
model$coefficients
coef<-model$coefficients
coef
coef[1,1]
coef[1]
coef[1]-coef[2]
coef[2]
exp(coef[1]-coef[2])
shuttle$auto <-as.integer(shuttle$use=="auto")
head(shuttle)
tail(shuttle)
model<-glm(auto~factor(wind)-1,shuttle,family = binomial)
model<-glm(auto~factor(wind)-1,shuttle,family = binomial)
model<-glm(auto~factor(wind)-1,shuttle,family = binomial)
source('~/.active-rstudio-document', encoding = 'UTF-8')
shuttle$auto <-as.integer(shuttle$use=="auto")
model<-glm(auto~factor(wind)-1,shuttle,family = binomial)
summary(model)
model$coefficients
model$coefficients[1,1]
model$coef[1,1]
model$coef[1]
model$coef[2]
exp(model$coefficients[1]-model$coefficients[2])
exp(summary(model)$coefficients[1]-summary(model)$coefficients[2])
shuttle$auto <-as.integer(shuttle$use=="auto")
model<-glm(auto~factor(wind)-1,shuttle,family = binomial)
summary(model)
exp(summary(model)$coefficients[1]-summary(model)$coefficients[2])
shuttle$auto <-as.integer(shuttle$use=="auto")
model<-glm(auto~factor(wind)-1,shuttle,family = binomial)
summary(model)
exp(summary(model)$coefficients[1]-summary(model)$coefficients[2])
head(shuttle)
model2<-glm(auto~factor(wind)+factor(magn)-1,shuttle,family = binomial)
summary(model2)
exp(summary(model2)$coefficients[1]-summary(model2)$coefficients[2])
model2<-glm(auto~factor(wind)+factor(magn)-1,shuttle,family = binomial)
summary(model2)
exp(summary(model2)$coefficients[1]-summary(model2)$coefficients[2])
model2<-glm(auto~factor(wind)+factor(magn)-1,shuttle,family = binomial)
summary(model2)
exp(summary(model2)$coefficients[1]-summary(model2)$coefficients[2])
model2<-glm(auto~factor(wind)+factor(magn)-1,shuttle,family = binomial)
#summary(model2)
exp(summary(model2)$coefficients[1]-summary(model2)$coefficients[2])
model2<-glm(auto~factor(wind)+factor(magn)-1,shuttle,family = binomial)
#summary(model2)
exp(summary(model2)$coefficients[1]-summary(model2)$coefficients[2])
head(InsectSprays)
model4<-glm(count~factor(spray),InsectSprays,family = poisson)
summary(model4)
model4<-glm(count~factor(spray)-1,InsectSprays,family = poisson)
summary(model4)
exp(summary(model4)$coefficients[1]-summary(model4)$coefficients[2])
x <- -5:5 y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x <- -5:5 y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
fit1<-lm(y[1:6]~x[1:6])
fit2<-lm(y[6:11]~x[6:11])
abline(fit1,col="blue",lwd=2)
plot(x,y)
plot(x,y)
abline(fit1,col="blue",lwd=2)
abline(fit2,col="blue",lwd=2)
summary(fit2)
spline<-cbind(1,x,x*(x>0))
fit3<-lm(y~spline-1)
abline(fit3,col="red",lwd=2)
fit3<-lm(y~spline)
abline(fit3,col="red",lwd=2)
yhat<-predict(fit3)
fit3<-lm(y~spline)
abline(fit3,col="red",lwd=2)
spline_term = x*(x>0)
regr = cbind(1,x,spline_term)
fit = lm(y~regr-1)
yhat = predict(fit)
plot(x,y,frame=FALSE,pch=21,bg='lightblue',cex=2)
lines(x,yhat,col='red',lwd=2)
head(mtcars)
plot(mpg~.,data=mtcars)
?mtcars
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 2)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 2)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(am), data = mtcars,
+        panel = panel.smooth, rows = 1)
coplot(mpg ~ disp | as.factor(am), data = mtcars,panel = panel.smooth, rows = 1)
coplot(mpg ~ am | as.factor(cyl), data = mtcars,panel = panel.smooth, rows = 1)
model<-lm(mpg~factor(am),mtcars)
summary(model)
model<-lm(mpg~factor(am)-1,mtcars)
summary(model)
pairs(mtcars, main = "mtcars data")
mtcars
?pairs
pairs(mtcars)
coplot(mpg ~ am | as.factor(cyl), data = mtcars,panel = panel.smooth, rows = 1)
dim(mtcars)
summary(mtcars)
mtcars$cyl<-as.factor(mtcars$cyl)
summary(mtcars)
mtcars
mtcars$vs<-as.factor(mtcars$vs)
mtcars$am<-as.factor(mtcars$am)
mtcars$gear<-as.factor(mtcars$gear)
mtcars$carb<-as.factor(mtcars$carb)
summary(mtcars)
mtcars$carb<-factor(mtcars$carb)
summary(mtcars)
?attach
attach(mtcars)
result <- t.test(mpg ~ am)
result
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel) # results hidden
?step
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel) # results hidden
amModel<-lm(mpg ~ am, data=mtcars)
summary(amModel) # results hidden
anova(amModel, stepModel, fullModel, amIntWtModel)
confint(amIntWtModel) # results hidden
summary(amIntWtModel)$coef
sum((abs(dfbetas(amIntWtModel)))>1)
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
par(mfrow = c(2, 2))
plot(amIntWtModel)
head(shuttle)
shuttle$auto <-as.integer(shuttle$use=="auto")
model<-glm(auto~factor(wind)-1,shuttle,family = binomial)
summary(model)
exp(summary(model)$coefficients[1]-summary(model)$coefficients[2])
model2<-glm(auto~factor(wind)+factor(magn)-1,shuttle,family = binomial)
#summary(model2)
exp(summary(model2)$coefficients[1]-summary(model2)$coefficients[2])
model4<-glm(count~factor(spray)-1,InsectSprays,family = poisson)
exp(summary(model4)$coefficients[1]-summary(model4)$coefficients[2])
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("MiKTeX")
Sys.which("pdflatex")
install.packages("knitr")
install.packages("knitr")
install.packages(tinytex)
"pdflatex" -halt-on-error -interaction=batchmode "RegressionModelProject.tex"
unlink('GitHub/StatisticalInferences/StatisticalInferences_Project1_cache', recursive = TRUE)
knit_with_parameters('~/GitHub/StatisticalInferences/StatisticalInferences_Project1.rmd')
unlink('GitHub/StatisticalInferences/StatisticalInferences_Project1_cache', recursive = TRUE)
MikTex Update (Admin)
MikTex Update()
Update()
install.packages(c("backports", "BH", "chron", "curl", "data.table", "DBI", "digest", "dotCall64", "dplyr", "fields", "Formula", "hms", "htmlTable", "httpuv", "httr", "lazyeval", "lubridate", "maps", "openssl", "packrat", "pillar", "PKI", "quantmod", "R6", "Rcpp", "RCurl", "reshape2", "rprojroot", "rsconnect", "scales", "shiny", "spam", "stringi", "stringr", "testthat", "tidyr", "TTR", "UsingR", "utf8", "xts", "yaml", "zoo"))
install.packages('rmarkdown')
install.packages("rmarkdown")
unlink('GitHub/StatisticalInferences/StatisticalInferences_Project1_cache', recursive = TRUE)
unlink('GitHub/StatisticalInferences/StatisticalInferences_Project1_cache', recursive = TRUE)
install.packages("tinytex")
tinytex::install_tinytex()
install_tinytex(force = TRUE)
unlink('GitHub/StatisticalInferences/StatisticalInferences_Project1_cache', recursive = TRUE)
options(tinytex.verbose = TRUE)
library(caret)
library(corrplot)
install.packages("corrplot")
library(corrplot)
library(doMC)
install.packages("doMC")
library(caret)
library(caret)
library(caret)
install.packages(c("broom", "clipr", "data.table", "ddalpha", "devtools", "dplyr", "evaluate", "ggplot2", "git2r", "glue", "highr", "httpuv", "iterators", "later", "lava", "munsell", "packrat", "pillar", "purrr", "RcppRoll", "RCurl", "recipes", "rlang", "rmarkdown", "robustbase", "spam", "stringi", "tinytex", "xts", "zoo"))
e
library(caret)
library(corrplot)
library(doMC)
install.packages("scales")
library(caret)
install.packages(c("glue", "stringi"))
library(caret)
install.packages("Rcpp")
library(caret)
install.packages("colorspace")
library(caret)
install.packages("plyr")
install.packages("")
library(caret)
install.packages("lazyeval")
install.packages("")
library(caret)
install.packages("tibble")
library(caret)
install.packages("tibble")
install.packages("caret")
library(caret)
install.packages("reshape2")
library(caret)
install.packages("")
install.packages("ModelMetrics")
library(caret)
install.packages("bindrcpp")
library(caret)
install.packages("tidyselect")
install.packages("")
library(caret)
install.packages("tidyr")
library(caret)
install.packages("backports")
library(caret)
install.packages("geometry")
library(caret)
install.packages("dimRed")
library(corrplot)
library(caret)
install.packages("kernlab")
install.packages(
lib  = lib <- .libPaths()[1],
pkgs = as.data.frame(installed.packages(lib), stringsAsFactors=FALSE)$Package,
type = 'source'
)
libpaths()
update.packages(ask = FALSE)
library(caret)
update.packages(ask = FALSE)
library(caret)
old.packages()
old.packages()
update.packages()
lib_loc <- "C:/Users/ssrivast/Documents/R/win-library/3.5"
to_install <- unname(installed.packages(lib.loc = lib_loc)[, "Package"])
to_install
install.packages(pkgs = to_install)
install.packages(pkgs = to_install)
library(caret)
library(caret)
#1. Load the training and test data
Data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
queryData <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
index<-createDataPartition(Data$classe,p=0.8,list=FALSE)
trainingData<-Data[index,]
testData<-Data[-index,]
#2.Explore the data
dim(trainingData)
head(trainingData)
str(trainingData)
summary(trainingData)
#x<-trainingData[,c(1:159)]
#y<-trainingData[,160]
# Create model with default paramters
control <- trainControl(method="cv", number=10)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- sqrt(ncol(trainingData))
tunegrid <- expand.grid(.mtry=mtry)
effectiveTrainData<-trainingData[,c(8:11,37:49,60:68,84:86,102,113:124,140,151:160)]
#Models:
model_rf <- train(classe~., data=effectiveTrainData, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
model_gbm <- train(classe~., data=effectiveTrainData, method="gbm", metric=metric,  trControl=control)
model_rpart <- train(classe~., data=effectiveTrainData, method="rpart", metric=metric, trControl=control)
model_lda <- train(classe~., data=effectiveTrainData, method="lda", metric=metric,  trControl=control)
model_xgbTree <- train(classe~., data=effectiveTrainData, method="xgbTree", metric=metric, trControl=control)
View(testData)
model_xgbTree <- train(classe~., data=effectiveTrainData, method="xgbTree", metric=metric)
pred_rf<-predict(model_rf,newdata = testData)
pred_gbm<-predict(model_gbm,newdata = testData)
pred_rpart<-predict(model_rpart,newdata = testData)
pred_lda<-predict(model_lda,newdata = testData)
cm_rf<-confusionMatrix(testData$classe,pred_rf)
cm_gbm<-confusionMatrix(testData$classe,pred_gbm)
cm_rpart<-confusionMatrix(testData$classe,pred_rpart)
cm_lda<-confusionMatrix(testData$classe,pred_lda)
cm_gbm
cm_rpart
cm_lda
str(trainingData)
library(parallel)
library(doParallel)
library(parallel)
library(parallel)
library(doParallel)
install.packages(doParallel)
install.packages("doParallel")
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
library(doParallel)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
Data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
queryData <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
index<-createDataPartition(Data$classe,p=0.8,list=FALSE)
trainingData<-Data[index,]
testData<-Data[-index,]
control <- trainControl(method="repeatedcv", number=10, repeats=3)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- sqrt(ncol(trainingData))
tunegrid <- expand.grid(.mtry=mtry)
effectiveTrainData<-trainingData[,c(8:11,37:49,60:68,84:86,102,113:124,140,151:160)]
model_rf <- train(classe~., data=effectiveTrainData, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
# Create model with default paramters
control <- trainControl(method="repeatedcv", number=10, repeats=3,allowParallel = TRUE)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- sqrt(ncol(trainingData))
tunegrid <- expand.grid(.mtry=mtry)
effectiveTrainData<-trainingData[,c(8:11,37:49,60:68,84:86,102,113:124,140,151:160)]
#Models:
model_rf <- train(classe~., data=effectiveTrainData, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
stopCluster(cluster)
registerDoSEQ()
rm(list = ls())
install.packages("plotly")
getwd()
setwd("C:\\Users\\ssrivast\\Documents\\GitHub\\DevelopingDataProducts\\Week4\\Countries_GDP")
GDP_Data <- read.csv('GDP.csv',header = TRUE)
head(GDP_Data)
head(GDP_Data[,1])
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, mode = "lines")
head(stocks)
plot_ly(GDP_Data)
head(GDP_Data)
getwd()
GDP_Data1 <- read.csv('GDP1.csv',header = TRUE)
head(GDP_Data1)
plot_ly(GDP_Data1)
plot_ly(GDP_Data1, x = ~Year, y = ~China, mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = ~India, mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = ~China, mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = ~c(China,India), mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = c(China,India), mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = c(~China,~India), mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = c(~China,~India), mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = ~c(~China,~India), mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = c(~China,~India), mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = ~China+~India), mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = ~China+~India, mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = ~(China+India), mode = "lines")
plot_ly(GDP_Data1, x = ~Year, y = ~(China,India), mode = "lines")
colnames(GDP_Data1)
colnames(GDP_Data1)[,2:4]
colnames(GDP_Data1)[,2]
colnames(GDP_Data1)
class(colnames(GDP_Data1))
a<-colnames(GDP_Data1)
a
a[1,]
a[1]
a[1:3]
a<-colnames(GDP_Data1)[2:7]
a<-colnames(GDP_Data1)[1]
colnames(GDP_Data1)[1]
colnames(GDP_Data1)[2:7]
colnames(GDP_Data1)[2:8]
ui <- fluidPage(
actionButton("add", "Add UI")
)
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
shinyApp(ui, server)
shiny::runApp('~/test')
runApp('~/test')
head(GDP_Data1)
GDP_data2<-GDP_Data1[(GDP_Data1$Year<1962),]
GDP_data2
GDP_data2<-GDP_Data1[(GDP_Data1$Year<1962) | (GDP_Data1$Year>2014) ,]
GDP_data2
GDP_data2<-GDP_Data1[(GDP_Data1$Year<1962) | (GDP_Data1$Year>2014) ,]
GDP_data2
GDP_data2<-GDP_Data1[(GDP_Data1$Year<1962) & (GDP_Data1$Year>2014) ,]
GDP_data2
GDP_data2<-GDP_Data1[(GDP_Data1$Year<1962) | (GDP_Data1$Year>2014) ,]
GDP_data2
GDP_data2<-GDP_Data1[(GDP_Data1$Year>1999) | (GDP_Data1$Year<2005) ,]
GDP_data2
GDP_data2<-GDP_Data1[(GDP_Data1$Year>1999) | (GDP_Data1$Year<2005) ,]
GDP_data2
dim(GDP_Data1)
GDP_data2<-GDP_Data1[(GDP_Data1$Year>1999) & (GDP_Data1$Year<2005) ,]
dim(GDP_Data1)
GDP_data2
GDP_data2<-GDP_Data1[(GDP_Data1$Year>=1999) & (GDP_Data1$Year<=2005) ,]
GDP_data2
